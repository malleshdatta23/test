import os
import re
import pandas as pd
import configparser
import teradatasql

# ------------------------ CONFIG ------------------------
INPUT_EXCEL = r"C:\Users\kovurma\Downloads\basetables\example.xlsx"  # Your input Excel file
CONFIG_FILE = r"C:\Users\kovurma\Downloads\Alteryx_workflows-20250710T202032Z-1-001\teradata_config.txt"  # Teradata credentials
OUTPUT_FILE = r"C:\Users\kovurma\Downloads\basetables\output.xlsx"  # Output Excel file
MAX_DEPTH = 10

# ------------------- UTILITY FUNCTIONS ------------------
def remove_sql_comments(sql_string):
    sql_string = re.sub(r'/\*.*?\*/', '', sql_string, flags=re.DOTALL)
    return re.sub(r'--.*', '', sql_string)

def extract_sql_metadata(sql_string):
    if not sql_string or not sql_string.strip(): return []
    sql_no_comments = remove_sql_comments(sql_string)
    sql_flat = re.sub(r'\s+', ' ', sql_no_comments).strip()
    pattern = re.compile(r'\b(?:FROM|JOIN|UPDATE|INTO|TABLE)\s+([\w\.\[\]`"]+)', re.IGNORECASE)
    matches = pattern.findall(sql_flat)
    return sorted({re.sub(r'[\[\]`"]', '', m) for m in matches})

def get_object_type(cursor, db_name, obj_name):
    try:
        cursor.execute(f"""
            SELECT TableKind 
            FROM DBC.TablesV 
            WHERE DatabaseName = '{db_name}' AND TableName = '{obj_name}'
        """)
        result = cursor.fetchone()
        if result:
            kind = result[0]
            if kind == 'V': return 'VIEW'
            if kind == 'T': return 'TABLE'
            return f"OTHER ({kind})"
    except Exception as e:
        return f"ERROR: {e}"
    return "UNKNOWN"

# ------------------- MAIN RECURSIVE LOGIC ------------------
def fetch_recursive_view_ddls(initial_views, max_depth=10, config_path=CONFIG_FILE):
    config = configparser.ConfigParser()
    config.read(config_path)
    td = config['teradata']
    host, user, pwd, auth = td['host'], td['username'], td['password'], td.get('authentication')

    visited, results = set(), []
    queue = [(v, 1, None) for v in initial_views]  # (view_name, level, parent_view)

    with teradatasql.connect(host=host, user=user, password=pwd, logmech=auth) as conn:
        cursor = conn.cursor()
        while queue:
            view, level, parent = queue.pop(0)
            if view in visited or level > max_depth:
                continue
            visited.add(view)
            try:
                print(f"[Level {level}] Fetching DDL for: {view}")
                cursor.execute(f"SHOW VIEW {view};")
                ddl = '\n'.join(row[0] for row in cursor.fetchall())
                base_objs = extract_sql_metadata(ddl)

                base_tables = []
                nested_views = []
                for full_name in base_objs:
                    if '.' not in full_name:
                        continue
                    db, tbl = full_name.split('.', 1)
                    obj_type = get_object_type(cursor, db.strip(), tbl.strip())
                    if obj_type == 'VIEW':
                        nested_views.append(full_name)
                    elif obj_type == 'TABLE':
                        base_tables.append(full_name)

                results.append({
                    "Original View": parent if parent else view,
                    "Level": level,
                    "View Name": view,
                    "Base Tables": ', '.join(base_tables),
                    "Nested Views": ', '.join(nested_views),
                    "View DDL": ddl
                })

                for nested in nested_views:
                    queue.append((nested, level + 1, view))

            except Exception as e:
                print(f"   -> ERROR: {e}")
                results.append({
                    "Original View": parent if parent else view,
                    "Level": level,
                    "View Name": view,
                    "Base Tables": '',
                    "Nested Views": '',
                    "View DDL": f"ERROR: {e}"
                })

    return results

# ------------------------ MAIN ------------------------
def main():
    print("\U0001F4C5 Reading input Excel...")
    df = pd.read_excel(INPUT_EXCEL)
    initial_views = df['Metadata'].dropna().unique().tolist()

    print("\U0001F501 Starting recursive DDL extraction...")
    result_data = fetch_recursive_view_ddls(initial_views, max_depth=MAX_DEPTH)

    print("\U0001F4C4 Writing results to Excel...")
    out_df = pd.DataFrame(result_data)
    out_df.to_excel(OUTPUT_FILE, index=False, engine='openpyxl')

    print(f"\u2705 Done! Results saved to: {OUTPUT_FILE}")

if __name__ == "__main__":
    main()
